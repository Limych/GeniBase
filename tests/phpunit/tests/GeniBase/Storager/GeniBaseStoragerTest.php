<?php
namespace GeniBase\Tests\Storager;

use GeniBase\Storager\GeniBaseStorager;

/**
 * Test class for GeniBaseStorager.
 * Generated by PHPUnit on 2017-07-05 at 04:08:04.
 */
class GeniBaseStoragerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers GeniBase\Storager\GeniBaseStorager::makeGBID
     */
    public function testMakeGBID()
    {
        $iterations = 100;

        $data = [GeniBaseStorager::makeGBID()];

        // Test for random GBIDs
        for ($i = 0; $i < $iterations; $i++) {
            $d = GeniBaseStorager::makeGBID();
            $this->assertFalse(in_array($d, $data));
            $data[] = $d;
        }

        // Test for predefined GBIDs
        for ($i = 0; $i < $iterations; $i++) {
            $str = 'some text ' . $i;

            $d = GeniBaseStorager::makeGBID($str);
            $this->assertFalse(in_array($d, $data), 'Iteration ' . $i);

            $d2 = GeniBaseStorager::makeGBID($str);
            $this->assertEquals($d, $d2);
            $data[] = $d;
        }
    }

    /**
     * @covers GeniBase\Storager\GeniBaseStorager::makeUUID
     */
    public function testMakeUUID()
    {
        $iterations = 100;

        $data = [GeniBaseStorager::makeGBID()];

        // Test for random GBIDs
        for ($i = 0; $i < $iterations; $i++) {
            $d = GeniBaseStorager::makeUUID();
            $this->assertFalse(in_array($d, $data));
            $data[] = $d;
        }

        // Test for predefined GBIDs
        for ($i = 0; $i < $iterations; $i++) {
            $str = 'some text ' . $i;

            $d = GeniBaseStorager::makeUUID($str);
            $this->assertFalse(in_array($d, $data), 'Iteration ' . $i);

            $d2 = GeniBaseStorager::makeUUID($str);
            $this->assertEquals($d, $d2);
            $data[] = $d;
        }
    }

}
